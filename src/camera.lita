import "cglm/cglm"
import "common"
import "libc" as c


const CAMERA_FIRST_PERSON_MIN_CLAMP =  85.0f
const CAMERA_FIRST_PERSON_MAX_CLAMP = -85.0f
const CAMERA_FIRST_PERSON_FOCUS_DISTANCE = 25.0f
public struct Camera {
    position: vec3
    target: vec3
    up: vec3

    pitch: f32
    yaw: f32
    roll: f32

    fov: f32
}

public enum MovementControls {
    MOVE_BACKWARD   =(1<<0),
    MOVE_FORWARD    =(1<<1),
    MOVE_RIGHT      =(1<<2),
    MOVE_LEFT       =(1<<3),
}

public func (camera: Camera*) init() {
    var v1 = camera.position;
    var v2 = camera.target;
    
    var dx = v2[0] - v1[0];
    var dy = v2[1] - v1[1];
    var dz = v2[2] - v1[2];
    
    //cameraTargetDistance = sqrt(dx*dx + dy*dy + dz*dz);
    
    var distance = vec2{ 0.0f, 0.0f };
    distance[0] = c::sqrtf(dx*dx + dz*dz);
    distance[1] = c::sqrtf(dx*dx + dy*dy);
    

    // Camera angle calculation
    if(distance[0] > 0) {
        camera.pitch = +c::asinf(c::fabs(dx) as (f32) / distance[0]); // Camera angle in plane XZ (0 aligned with Z, move positive CCW)
    }

    if(distance[1] > 0) {
        camera.yaw   = -c::asinf(c::fabs(dy) as (f32) / distance[1]); // Camera angle in plane XY (0 aligned with X, move positive CW)
    }
    
    c::printf("Pitch %f, Yaw: %f\n", camera.pitch, camera.yaw)
}

public func (camera: Camera*) move(controls: i32, dx: f32, dy: f32) {

    const CAMERA_MOUSE_MOVE_SENSITIVITY = 0.002f // 0.045f
    const PLAYER_MOVEMENT_SENSITIVITY = 0.15f //0.058f

    //c::printf("Dx: %f, Dy: %f\n", dx, dy)

    var cameraAngleX = camera.pitch
    var cameraAngleY = camera.yaw

    var isForward = controls & MovementControls.MOVE_FORWARD  ? 1 : 0;
    var isBackward = controls & MovementControls.MOVE_BACKWARD ? 1 : 0;
    var isRight = controls & MovementControls.MOVE_RIGHT ? 1 : 0;
    var isLeft = controls & MovementControls.MOVE_LEFT ? 1 : 0;

    camera.position[0] += (c::sinf(cameraAngleX)*isBackward -
                           c::sinf(cameraAngleX)*isForward -
                           c::cosf(cameraAngleX)*isLeft +
                           c::cosf(cameraAngleX)*isRight) * PLAYER_MOVEMENT_SENSITIVITY;
                                   
    camera.position[1] += (c::sinf(cameraAngleY)*isForward -
                           c::sinf(cameraAngleY)*isBackward) * PLAYER_MOVEMENT_SENSITIVITY;
                                   
    camera.position[2] += (c::cosf(cameraAngleX)*isBackward -
                           c::cosf(cameraAngleX)*isForward +
                           c::sinf(cameraAngleX)*isLeft -
                           c::sinf(cameraAngleX)*isRight) * PLAYER_MOVEMENT_SENSITIVITY;

    cameraAngleX += (dx*-CAMERA_MOUSE_MOVE_SENSITIVITY);
    cameraAngleY += (dy*-CAMERA_MOUSE_MOVE_SENSITIVITY);

    
    if (cameraAngleY > toRadians(CAMERA_FIRST_PERSON_MIN_CLAMP)) {
        cameraAngleY = toRadians(CAMERA_FIRST_PERSON_MIN_CLAMP);
    }
    else if (cameraAngleY < toRadians(CAMERA_FIRST_PERSON_MAX_CLAMP)) {
        cameraAngleY = toRadians(CAMERA_FIRST_PERSON_MAX_CLAMP);
    }

    camera.target[0] = camera.position[0] - c::sinf(cameraAngleX)*CAMERA_FIRST_PERSON_FOCUS_DISTANCE;
    camera.target[1] = camera.position[1] + c::sinf(cameraAngleY)*CAMERA_FIRST_PERSON_FOCUS_DISTANCE;
    camera.target[2] = camera.position[2] - c::cosf(cameraAngleX)*CAMERA_FIRST_PERSON_FOCUS_DISTANCE;

    camera.pitch = cameraAngleX
    camera.yaw  = cameraAngleY

    /*c.pos[2] += (m[1] * movementSpeed)
    c.pos[0] += (m[0] * movementSpeed)

    c.pitch -= dy * mouseSpeed;
    c.yaw   -= dx * mouseSpeed;

    var zMove = (m[1] * movementSpeed)
    var xMove = (m[0] * movementSpeed)

    var px = -zMove * c::sin(toRadians(c.yaw))
    var py = +zMove * c::sin(toRadians(c.pitch))
    var pz = +zMove * c::cos(toRadians(c.yaw))
    */
    //c.pos[0] += px * xMove
    //c.pos[1] += py
    //c.pos[2] += pz

    // Setup Camera view
// Matrix GetCameraMatrix(Camera camera)
// {
//     return MatrixLookAt(camera.position, camera.target, camera.up);
// }    
//    Matrix matView = MatrixLookAt(camera.position, camera.target, camera.up);
//    rlMultMatrixf(MatrixToFloat(matView));      // Multiply MODELVIEW matrix by view matrix (camera)
}

public func (c: Camera*) viewMatrix(m: mat4) {
    glm_mat4_identity(m)
    
    /*glm_rotate(m, toRadians(c.pitch), vec3{1,0,0})
    glm_rotate(m, toRadians(c.yaw),   vec3{0,1,0})
    glm_rotate(m, toRadians(c.roll),  vec3{0,0,1})*/
    /*glm_rotate(m, c.pitch, vec3{1,0,0})
    glm_rotate(m, c.yaw,   vec3{0,1,0})
    glm_rotate(m, c.roll,  vec3{0,0,1})

    var n = vec3 {
        -c.position[0],
        -c.position[1],
        -c.position[2]
    }
    glm_translate(m, n)*/

    glm_lookat(c.position, c.target, c.up, m)
}