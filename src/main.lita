import "io"
import "common"
import "input_system"
import "game"


import "opengl"
import "glfw"
import "model"
import "renderer"
import "texture"
import "shader"
import "camera"
import "light"
import "entity"
import "math"
import "obj_loader"

import "libc" as c

import "cglm/cglm"


@cFile("glad.h");
@raw("""
#include <GLFW/glfw3.h>
#include <cglm/cglm.h>
""");

import "stb_image" as stb;

const WIDTH = 1280
const HEIGHT = 720

const FOV = 90f
const NEAR_PLANE = 0.01f
const FAR_PLANE  = 10_000f

var isRunning = false;

var model = Model{};
var model2 = Model{};

const W = 256f;
const X = ((W/16f) / W)

/*
    3 floats Position
    3 floats Normal
    2 floats TexCoord
*/    
const data = []f32 { 

    //Position ---------|Color-----------|Tex
    /* 2D plane
    -0.5f, +0.5f, 0.0f,  1f, 1f, 1f, 1f,  0f, 0f,  
    +0.5f, +0.5f, 0.0f,  1f, 1f, 1f, 1f,  1f, 0f,  
	+0.5f, -0.5f, 0.0f,  1f, 1f, 1f, 1f,  1f, 1f,  
	-0.5f, -0.5f, 0.0f,  1f, 1f, 1f, 1f,  0f, 1f, 
    */

    //Position ----|Normal------|Tex
/*    
    -1f, -1f, +1f,  1f, 1f, 1f,  0f, 0f,	
    +1f, -1f, +1f,  1f, 1f, 1f,  0f, 1f,  
    +1f, +1f, +1f,  1f, 1f, 1f,  1f, 1f,
    -1f, +1f, +1f,  1f, 1f, 1f,  1f, 0f, 	
    
    +1f, +1f, +1f,  1f, 1f, 1f,  0f, 0f,	
    +1f, +1f, -1f,  1f, 1f, 1f,  0f, 1f,  
    +1f, -1f, -1f,  1f, 1f, 1f,  1f, 1f,
    +1f, -1f, +1f,  1f, 1f, 1f,  1f, 0f, 
    
    -1f, -1f, -1f,  1f, 1f, 1f,  0f, 0f,	
    +1f, -1f, -1f,  1f, 1f, 1f,  0f, 1f,  
    +1f, +1f, -1f,  1f, 1f, 1f,  1f, 1f,
    -1f, +1f, -1f,  1f, 1f, 1f,  1f, 0f, 
    
    -1f, -1f, -1f,  1f, 1f, 1f,  0f, 0f,	
    -1f, -1f, +1f,  1f, 1f, 1f,  0f, 1f,  
    -1f, +1f, +1f,  1f, 1f, 1f,  1f, 1f,
    -1f, +1f, -1f,  1f, 1f, 1f,  1f, 0f, 
    
    +1f, +1f, +1f,  1f, 1f, 1f,  0f, 0f,
    -1f, +1f, +1f,  1f, 1f, 1f,  0f, 1f,  
    -1f, +1f, -1f,  1f, 1f, 1f,  1f, 1f,
    +1f, +1f, -1f,  1f, 1f, 1f,  1f, 0f, 
    
    -1f, -1f, -1f,  1f, 1f, 1f,  0f, 0f,    
    +1f, -1f, -1f,  1f, 1f, 1f,  0f, 1f,  
    +1f, -1f, +1f,  1f, 1f, 1f,  1f, 1f,
    -1f, -1f, +1f,  1f, 1f, 1f,  1f, 0f,     
*/
/*
    // side
    -1f, -1f, +1f,  0f, 0f, -1f,   X, X*1f,
    +1f, -1f, +1f,  0f, 0f, -1f,  0f, X*1f,  
    +1f, +1f, +1f,  0f, 0f, -1f,  0f, X*2f,	
    -1f, +1f, +1f,  0f, 0f, -1f,   X, X*2f,   	
    
    // side
    +1f, +1f, +1f,  1f, 0f, 0f,   X, X*2f,
    +1f, +1f, -1f,  1f, 0f, 0f,  0f, X*2f,  
    +1f, -1f, -1f,  1f, 0f, 0f,  0f, X*1f,
    +1f, -1f, +1f,  1f, 0f, 0f,   X, X*1f, 
    
    // side
    -1f, -1f, -1f,  0f, 0f, 1f,   X, X*1f,	
    +1f, -1f, -1f,  0f, 0f, 1f,  0f, X*1f,  
    +1f, +1f, -1f,  0f, 0f, 1f,  0f, X*2f,
    -1f, +1f, -1f,  0f, 0f, 1f,   X, X*2f, 
    
    // side
    -1f, -1f, -1f, -1f, 0f, 0f,   X, X*1f,	
    -1f, -1f, +1f, -1f, 0f, 0f,  0f, X*1f,  
    -1f, +1f, +1f, -1f, 0f, 0f,  0f, X*2f,
    -1f, +1f, -1f, -1f, 0f, 0f,   X, X*2f, 
    
    // top
    +1f, +1f, +1f,  0f, 1f, 0f,  0f, X*3f,
    -1f, +1f, +1f,  0f, 1f, 0f,  0f, X*2f,  
    -1f, +1f, -1f,  0f, 1f, 0f,   X, X*2f,
    +1f, +1f, -1f,  0f, 1f, 0f,   X, X*3f, 
    
    // bottom
    -1f, -1f, -1f,  0f, -1f, 0f,  0f, X,    
    +1f, -1f, -1f,  0f, -1f, 0f,  0f, 0f,  
    +1f, -1f, +1f,  0f, -1f, 0f,   X, 0f,
    -1f, -1f, +1f,  0f, -1f, 0f,   X, X,   
*/ 

    // front side
    -1f, -1f, +1f,  0f, 0f, -1f,   X, X*1f,
    +1f, -1f, +1f,  0f, 0f, -1f,  0f, X*1f,  
    +1f, +1f, +1f,  0f, 0f, -1f,  0f, X*2f,	
    -1f, +1f, +1f,  0f, 0f, -1f,   X, X*2f,   	
    
    // right side
    +1f, +1f, +1f,  1f, 0f, 0f,   X, X*2f,
    +1f, +1f, -1f,  1f, 0f, 0f,  0f, X*2f,  
    +1f, -1f, -1f,  1f, 0f, 0f,  0f, X*1f,
    +1f, -1f, +1f,  1f, 0f, 0f,   X, X*1f, 
    
    // rear side
    -1f, -1f, -1f,  0f, 0f, 1f,   X, X*1f,	
    +1f, -1f, -1f,  0f, 0f, 1f,  0f, X*1f,  
    +1f, +1f, -1f,  0f, 0f, 1f,  0f, X*2f,
    -1f, +1f, -1f,  0f, 0f, 1f,   X, X*2f, 
    
    // left side
    -1f, -1f, -1f, -1f, 0f, 0f,   X, X*1f,	
    -1f, -1f, +1f, -1f, 0f, 0f,  0f, X*1f,  
    -1f, +1f, +1f, -1f, 0f, 0f,  0f, X*2f,
    -1f, +1f, -1f, -1f, 0f, 0f,   X, X*2f, 
    
    // top
    +1f, +1f, +1f,  0f, 1f, 0f,  0f, X*3f,
    -1f, +1f, +1f,  0f, 1f, 0f,  0f, X*2f,  
    -1f, +1f, -1f,  0f, 1f, 0f,   X, X*2f,
    +1f, +1f, -1f,  0f, 1f, 0f,   X, X*3f, 
    
    // bottom
    -1f, -1f, -1f,  0f, -1f, 0f,  0f, X,    
    +1f, -1f, -1f,  0f, -1f, 0f,  0f, 0f,  
    +1f, -1f, +1f,  0f, -1f, 0f,   X, 0f,
    -1f, -1f, +1f,  0f, -1f, 0f,   X, X,   


}

const indices = []u32 {    
    /*0,  1,  3,	
    3,  1,  2,	
    4,  5,  7,
    7,  5,  6,
    8,  9,  11,
    11, 9,  10,
    12, 13, 15,
    15, 13, 14,	
    16, 17, 19,
    19, 17, 18,
    20, 21, 23,
    23, 21, 22
*/

/*
    0,  1,  2,  0,  2,  3,   //front
    4,  5,  6,  4,  6,  7,   //right
    8,  9,  10, 8,  10, 11,  //back
    12, 13, 14, 12, 14, 15,  //left
    16, 17, 18, 16, 18, 19,  //top  
    20, 21, 22, 20, 22, 23   //bottom
*/    

    0,  1,  2,  0,  2,  3,   //front
    4,  6,  5,  6,  4,  7,   //right
    8,  10,  9, 8,  11, 10,  //back
    12, 13, 14, 12, 14, 15,  //left
    16, 18, 17, 18, 16, 19,  //top
    20, 21, 22, 20, 22, 23   //bottom
   
}

func array_length<T>(array: T*) : i32 {
    return (sizeof(array) / sizeof(array[0])) as (i32)
}

var texture: Texture;
var shader: ShaderProgram;

var camera = Camera{
    .position = vec3{0,0,20},
    .target = vec3{0,0,0},
    .up = vec3{0,1f,0},
    .fov = FOV,
    .pitch = 0,
    .yaw = 0,
    .roll = 0
}
var projectionMatrix: mat4;
var transformMatrix: mat4;
var viewMatrix: mat4;
var window: GLFWwindow*;

var box = Entity {
    .pos = vec3{0, 0, 0},
    .rot = vec3{0, 0, 0},
    .scale = 1f,
    .xform = mat4{0}
}

const GX = 40
const GY = 40
var ground: [GY][GX]Entity;

var light = Light {
    .pos = vec3{0, 100, 0},
    .color = vec3{1, 1, 1},
}

func CmdQuit(args: char const*) {
    isRunning = false;
}

func Init() {
    camera.init()

    var fragSource: char*;
    var status = ReadFile("../assets/shaders/basicFragment.glsl", &fragSource)

    var vertSource: char*;
    ReadFile("../assets/shaders/basicVertex.glsl", &vertSource)

    shader = LoadProgram(vertSource, fragSource)        
    glCheckErrorPrint()
    shader.bindAttr(AttribPos.POSITION, "position")
    shader.bindAttr(AttribPos.NORMAL, "normal")
    shader.bindAttr(AttribPos.TEXCOORD, "texCoord")
    shader.link()
    shader.validate()

    glCheckErrorPrint()

    texture = LoadTextureFromFile("../assets/texture.png")
    printf("Width: %f Height: %f\n", texture.width, texture.height)
    var indexLength = 36; // array_length<u32>(indices)
    var dataLength =  8 * 4 * 6;// array_length<f32>(data)
    printf("I: %d, D: %d\n", indexLength, dataLength)
    LoadModel(indices, indexLength, data, dataLength, texture, &model)


    //LoadOBJFromFile("../assets/skull.obj", &model2)

    for(var z = 0; z < GY; z+=1) {
        for(var x = 0; x < GX; x+=1) {
            var t = &ground[z][x]
            t.pos[0] = x * 2;
            t.pos[1] = 0;
            t.pos[2] = z * -2;
            t.scale = 1f
        }
    }

    var aspectRatio = (GetWindowWidth() as (f32) / GetWindowHeight() as (f32)) as (f32);
	var yScale = ((1f / c::tan(toRadians(FOV /2f))) * aspectRatio) as (f32);
	var xScale = yScale / aspectRatio;
    var frustumLength = FAR_PLANE - NEAR_PLANE;

    glm_mat4_identity(projectionMatrix)
    projectionMatrix[0][0] = xScale;
    projectionMatrix[1][1] = yScale;
    projectionMatrix[2][2] = -((FAR_PLANE + NEAR_PLANE) / frustumLength);
    projectionMatrix[2][3] = -1;
    projectionMatrix[3][2] = -((2 * NEAR_PLANE * FAR_PLANE) / frustumLength);
    projectionMatrix[3][3] = 0;

    printf("Aspect: %f\n", aspectRatio)    
    PrintMatrix(projectionMatrix)

    glm_mat4_identity(transformMatrix)
    glm_mat4_identity(viewMatrix)  

    shader.bind()
    shader.loadMat4ByName("transformationMatrix", transformMatrix)
    shader.loadMat4ByName("projectionMatrix", projectionMatrix)
    shader.loadMat4ByName("viewMatrix", viewMatrix)
    shader.loadVec3ByName("lightPos", light.pos)
    shader.loadVec3ByName("lightColor", light.color)
    shader.unbind()
}

func Update(timeStep: TimeStep*) {    
    InputSysUpdate(timeStep);
//    ConsoleUpdate(timeStep);

   // box.update(timeStep)
    GameUpdate(timeStep)

    var controls = 0
    if(InputSysIsKeyPressed(GLFW_KEY_W)) {
        controls |= MovementControls.MOVE_FORWARD
    }
    else if(InputSysIsKeyPressed(GLFW_KEY_S)) {
        controls |= MovementControls.MOVE_BACKWARD
    }

    if(InputSysIsKeyPressed(GLFW_KEY_A)) {
        controls |= MovementControls.MOVE_LEFT
    }
    else if(InputSysIsKeyPressed(GLFW_KEY_D)) {
        controls |= MovementControls.MOVE_RIGHT
    }

    if(InputSysIsKeyPressed(GLFW_KEY_Q)) {
        controls |= MovementControls.MOVE_UP
    }
    else if(InputSysIsKeyPressed(GLFW_KEY_E)) {
        controls |= MovementControls.MOVE_DOWN
    }

    var m = MousePos{0,0}
    InputSysGetMouseDeltaPos(m)
    camera.move(controls, m[0], m[1])
    
}

func Draw(alpha: f32) {
    glViewport(0, 0, WIDTH, HEIGHT)
    Prepare()

    glm_mat4_identity(viewMatrix)    
    camera.viewMatrix(viewMatrix)

    shader.bind()
    
    shader.loadMat4ByName("viewMatrix", viewMatrix)
    shader.loadFloatByName("shineDamper", 10f)
    shader.loadFloatByName("reflectivity", 1f)

    for(var z = 0; z < GY; z+=1) {
        for(var x = 0; x < GX; x+=1) {
            var t = &ground[z][x]

            t.transform(transformMatrix)
            shader.loadMat4ByName("transformationMatrix", transformMatrix)
            model.render()        
        }
    }

    box.transform(transformMatrix)
    shader.loadMat4ByName("transformationMatrix", transformMatrix)

//    glm_mat4_identity(viewMatrix)    
//    camera.viewMatrix(viewMatrix)

//    shader.loadMat4ByName("viewMatrix", viewMatrix)
//    shader.loadFloatByName("shineDamper", 10f)
//    shader.loadFloatByName("reflectivity", 1f)

    model.render()
    shader.unbind()
//    GameDraw();
//   ConsoleDraw();
}

func GetWindowWidth() : i32 {
    if(!window) {
        return 0;
    }

    var width: i32;
    var height: i32;
    glfwGetWindowSize(window, &width, &height);
    return width;
}

func GetWindowHeight() : i32 {
    if(!window) {
        return 0;
    }
    var width: i32;
    var height: i32;
    glfwGetWindowSize(window, &width, &height);
    return height;
}

func main(len: i32, args: char**) : i32 {
    glfwSetErrorCallback(errorCallback);
    
    if (!glfwInit()) {
        log(LogLevel.FATAL, "Failed to initialize glfw!\n")
    }    
    defer glfwTerminate();

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

    window = glfwCreateWindow(WIDTH, HEIGHT, "Kraft!", null, null);
    if (!window) {
        log(LogLevel.FATAL, "Failed to initialize window context!\n")
    }
    defer glfwDestroyWindow(window);

    glfwSetKeyCallback(window, keyCallback);
    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
    
    glfwMakeContextCurrent(window);
    gladLoadGLLoader(glfwGetProcAddress as (GLADloadproc));
    glfwSwapInterval(1);

    Init()

    glEnable(GL_CULL_FACE)
    glCullFace(GL_BACK)
    //glFrontFace(GL_CW)

    var gameClock : Time = 0_i64;
    var currentTime = GetTicks()
    var accumulator = 0_i64
    var previousTime : Time = 0_i64

    const maxIterations = 2
    const maxDelta = 250_i64
    const frameRate = 30_i64
    const dt = 1000_i64 / frameRate

    const timeStep = TimeStep {
        .frameTime: dt,
        .gameClock: gameClock,
        .frameTimeFraction: dt as (f64) / 1000_f64
    }

    isRunning = true;

    while (!glfwWindowShouldClose(window) && isRunning) {
        var newTime = GetTicks()
        var deltaTime = newTime - currentTime;

        // don't let the game get too far behind
        if(deltaTime > maxDelta) {
            deltaTime = maxDelta;
        }
        
        glfwPollEvents()

        // Keep the game logic running at a fix time step
        if(deltaTime >= dt) 
        {
            currentTime = newTime
            accumulator += deltaTime
            var iteration = 0

            while(accumulator >= dt && iteration < maxIterations) {
                timeStep.gameClock = gameClock

                Update(&timeStep)

                gameClock   += dt
                accumulator -= dt
                iteration   += 1                
            }
        }

        var alpha : f32 = (accumulator as (f64) / dt as (f64)) as (f32)
        Draw(alpha)
        glfwSwapBuffers(window);
    }


}

public func GetKeyState(key: i32) : i32 {
    return glfwGetKey(window, key)
}

public func GetMousePos(mousePos: MousePos) {
    var x:f64;
    var y:f64;

    glfwGetCursorPos(window, &x, &y)

    mousePos[0] = x as (f32)
    mousePos[1] = y as (f32)

    //printf("Mouse: %f,%f\n", x, y)
}

public func GetMouseButtonState(btn: i32) : i32 {
    return glfwGetMouseButton(window, btn)
}

func keyCallback(window: GLFWwindow*, key: i32, scancode: i32, action: i32, mods: i32) {
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GLFW_TRUE);
}

func errorCallback(error: i32, description: char const*) {
    log(LogLevel.ERROR, "%s", description)
}


