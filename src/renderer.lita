import "opengl"
import "cglm/cglm"
import "shader"
import "entity"
import "model"

public func Prepare() {    
    glEnable(GL_DEPTH_TEST)
    //glLogicOp(GL_INVERT)
//    glEnable(GL_BLEND)
//    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
    glClearColor(0f, 0.5f, 0.75f, 1f)    
}

public func BatchEntityRender(entities: Entity*, len: i32, model: Model*, shader: ShaderProgram, viewMatrix: mat4) {
    shader.bind()
    shader.loadMat4ByName("viewMatrix", viewMatrix)
    shader.loadFloatByName("shineDamper", 10f)
    shader.loadFloatByName("reflectivity", 1f)

    glEnableVertexAttribArray(AttribPos.POSITION)
    glEnableVertexAttribArray(AttribPos.NORMAL)
    glEnableVertexAttribArray(AttribPos.TEXCOORD)
    
    glBindVertexArray(model.vao)
    glActiveTexture(GL_TEXTURE0)
    glBindTexture(GL_TEXTURE_2D, model.tex.texId)

    var transformMatrix: mat4;

    for(var i = 0; i < len; i +=1) {
        var ent = &entities[i]
        ent.transform(transformMatrix)
        shader.loadMat4ByName("transformationMatrix", transformMatrix)

        glDrawElements(GL_TRIANGLES, model.indexCount, GL_UNSIGNED_INT, 0)
    }
    
    glDisableVertexAttribArray(AttribPos.POSITION)
    glDisableVertexAttribArray(AttribPos.NORMAL)
    glDisableVertexAttribArray(AttribPos.TEXCOORD)

    shader.unbind()
}